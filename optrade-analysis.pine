//@version=5
indicator("AnÃ¡lisis OPTRADE con Promedio", overlay=true, max_labels_count=500)

// â€”â€”â€”â€” ConfiguraciÃ³n â€”â€”â€”â€” //
string assetType = input.string("Crypto", "Tipo de Activo", options=["Crypto", "Otros"])
float tpAtrMultiplier = input.float(1.0, "Multiplicador TP ATR", minval = 0.1, step = 0.1, tooltip = "Multiplicador para el cÃ¡lculo del Take Profit basado en ATR")
float slAtrMultiplier = input.float(1.0, "Multiplicador SL ATR", minval = 0.1, step = 0.1, tooltip = "Multiplicador para el cÃ¡lculo del Stop Loss basado en ATR")
bool invertTpSl = input.bool(false, "Invertir TP y SL", tooltip = "Activa esta opciÃ³n si deseas invertir los niveles de TP y SL.")
int avgCandles = input.int(1, "Cantidad de Velas para Promedio", minval=1, tooltip="Especifica cuÃ¡ntas velas se deben promediar para los indicadores.")

// Selector para elegir entre DinÃ¡mico y Manual
bool useDynamicPrice = input.bool(true, "Usar Precio DinÃ¡mico (Cerrar)", tooltip = "Selecciona 'true' para usar el precio de cierre actual como base. Selecciona 'false' para ingresar un precio manual.")
float manualPrice = input.float(301.30, "Precio Manual", tooltip = "Ingresa un precio manual si 'Usar Precio DinÃ¡mico' estÃ¡ desactivado.")
// Determinar el precio base
float basePrice = useDynamicPrice ? close : manualPrice

// FunciÃ³n para calcular el promedio de los Ãºltimos N valores
avgValue(values) =>
    ta.sma(values, avgCandles)

// â€”â€”â€”â€” CÃ¡lculos â€”â€”â€”â€” //
// 1. SMA50
sma50 = ta.sma(close, 50)
cond_sma = avgValue(close) > sma50 ? "SÃ­" : "No"
sma_emoji = cond_sma == "SÃ­" ? "ðŸŸ¢" : "ðŸ”´"

// 2. RSI
rsiThreshold = assetType == "Crypto" ? 75 : 70
rsi = ta.rsi(close, 14)
avg_rsi = avgValue(rsi)
cond_rsi = avg_rsi >= rsiThreshold ? "Sobrecompra" : avg_rsi <= 30 ? "Sobreventa" : "Neutral"
rsi_emoji = cond_rsi == "Sobrecompra" ? "ðŸ”´" : cond_rsi == "Sobreventa" ? "ðŸŸ¢" : "ðŸŸ¡"

// 3. MACD
[macdLine, signalLine, _] = ta.macd(close, 12, 26, 9)
avg_macdLine = avgValue(macdLine)
avg_signalLine = avgValue(signalLine)
cond_macd = avg_macdLine > avg_signalLine ? "SÃ­" : "No"
macd_emoji = cond_macd == "SÃ­" ? "ðŸŸ¢" : "ðŸ”´"

// 4. Bollinger Bands
lengthBB = 20
multBB = 2.0
basis = ta.sma(close, lengthBB)
dev = multBB * ta.stdev(close, lengthBB)
upperBB = basis + dev
lowerBB = basis - dev
distanciaABandaSuperior = upperBB - avgValue(close)
distanciaABandaInferior = avgValue(close) - lowerBB
bandRange = upperBB - lowerBB
threshold = bandRange * 0.33
cond_bb = distanciaABandaSuperior <= threshold ? "Banda Superior" : 
          distanciaABandaInferior <= threshold ? "Banda Inferior" : 
          "En el Medio"
bb_emoji = cond_bb == "Banda Superior" ? "ðŸ”´" : cond_bb == "Banda Inferior" ? "ðŸŸ¢" : "ðŸŸ¡"

// 5. EstocÃ¡stico
lengthStoch = 14
k = ta.sma(ta.stoch(close, high, low, lengthStoch), 3)
avg_k = avgValue(k)
cond_stoch = avg_k >= 80 ? "Sobrecompra" : avg_k <= 20 ? "Sobreventa" : "Neutral"
stoch_emoji = cond_stoch == "Sobrecompra" ? "ðŸ”´" : cond_stoch == "Sobreventa" ? "ðŸŸ¢" : "ðŸŸ¡"

// 6. Volumen
volMedia = ta.sma(volume, 10)
avg_volume = avgValue(volume)
cond_vol = avg_volume > volMedia * 1.2 ? "Aumentando" : avg_volume < volMedia * 0.8 ? "Disminuyendo" : "Neutral"
vol_emoji = cond_vol == "Aumentando" ? "ðŸŸ¢" : cond_vol == "Disminuyendo" ? "ðŸ”´" : "ðŸŸ¡"

// 7. Ichimoku Cloud
tenkan = (ta.highest(high, 9) + ta.lowest(low, 9)) / 2
kijun = (ta.highest(high, 26) + ta.lowest(low, 26)) / 2
senkouA = (tenkan + kijun) / 2
senkouB = (ta.highest(high, 52) + ta.lowest(low, 52)) / 2
chikou = close
aboveCloud = avgValue(close) > senkouA and avgValue(close) > senkouB
belowCloud = avgValue(close) < senkouA and avgValue(close) < senkouB
insideCloud = not aboveCloud and not belowCloud
cond_ichimoku = aboveCloud ? "Por encima" : belowCloud ? "Por debajo" : "Dentro"
ichimoku_emoji = cond_ichimoku == "Por encima" ? "ðŸŸ¢" : cond_ichimoku == "Por debajo" ? "ðŸ”´" : "ðŸŸ¡"

// 8. ATR 
atrLength = 14
atr = ta.atr(atrLength)
// Calcular TP y SL con opciÃ³n de inversiÃ³n
float atrStopLossLong = invertTpSl ? basePrice + atr * slAtrMultiplier : basePrice - atr * slAtrMultiplier  // SL para compra
float atrStopLossShort = invertTpSl ? basePrice - atr * tpAtrMultiplier : basePrice + atr * tpAtrMultiplier // SL para venta

// â€”â€”â€”â€” Interfaz â€”â€”â€”â€” //
var table t = table.new(position.bottom_right, 3, 10, frame_color=color.black, frame_width=1, border_width=1)
bgDark = color.rgb(40, 40, 40)
headerSize = size.large
if barstate.islast
    // Encabezados
    table.cell(t, 0, 0, " âšª ", bgcolor=bgDark, text_color=color.white, text_size=headerSize)
    table.cell(t, 1, 0, " Indicador ",  bgcolor=bgDark, text_color=color.white, text_size=headerSize)
    table.cell(t, 2, 0, "   Estado  ", bgcolor=bgDark, text_color=color.white, text_size=headerSize)
    
    // SMA50
    table.cell(t, 0, 1, sma_emoji,      bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 1, "Precio > SMA50", bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 1, cond_sma,       bgcolor=bgDark, text_color=color.white)
    
    // RSI
    table.cell(t, 0, 2, rsi_emoji,      bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 2, "RSI",          bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 2, cond_rsi,       bgcolor=bgDark, text_color=color.white)
    
    // MACD
    table.cell(t, 0, 3, macd_emoji,     bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 3, "Cruce alcista en MACD",         bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 3, cond_macd,      bgcolor=bgDark, text_color=color.white)
    
    // Bandas Bollinger
    table.cell(t, 0, 4, bb_emoji,           bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 4, "Bandas Bollinger", bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 4, cond_bb,            bgcolor=bgDark, text_color=color.white)
    
    // EstocÃ¡stico
    table.cell(t, 0, 5, stoch_emoji,   bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 5, "EstocÃ¡stico", bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 5, cond_stoch,    bgcolor=bgDark, text_color=color.white)
    
    // Volumen
    table.cell(t, 0, 6, vol_emoji,     bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 6, "Volumen",     bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 6, cond_vol,      bgcolor=bgDark, text_color=color.white)
    
    // Ichimoku Cloud
    table.cell(t, 0, 7, ichimoku_emoji,     bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 7, "Ichimoku Cloud",   bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 7, cond_ichimoku,      bgcolor=bgDark, text_color=color.white)
    
    // TP ATR
    table.cell(t, 0, 8, str.tostring(tpAtrMultiplier, "#.0x"), bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 8, "TP ATR",  bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 8, str.tostring(atrStopLossShort, "#.##"), bgcolor=bgDark, text_color=color.white)
    
    // SL ATR
    table.cell(t, 0, 9, str.tostring(slAtrMultiplier, "#.0x"), bgcolor=bgDark, text_color=color.white)
    table.cell(t, 1, 9, "SL ATR", bgcolor=bgDark, text_color=color.white)
    table.cell(t, 2, 9, str.tostring(atrStopLossLong, "#.##"), bgcolor=bgDark, text_color=color.white)

// --------------------------//
//      OPTRADE ChatBot      //
//  Developed by SoftCodify  //
//---------------------------//